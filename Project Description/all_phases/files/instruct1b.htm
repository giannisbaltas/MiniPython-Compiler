<html>
<head>
	<title>Συντακτική Ανάλυση</title>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1253">
</head>

<body>
<font face="Arial">
	
<h1>Συντακτική ανάλυση</h1>
<p>Κάτω από τον τίτλο Productions γράφουμε τους κανόνες που αποτελούν τη γραμματική που παράγει την επιθυμητή γλώσσα. Γενικά ισχύει ότι <i>αριστερό = δεξί;</i>, όπου το δεξί μπορεί να αποτελείται από την παράθεση ενός ή περισσοτέρων tokens ή ακόμα άλλων αριστερών μελών κανόνων παραγωγής. Και εδώ μπορούν να χρησιμοποιηθούν οι τελεστές *, ?, +. Παράδειγμα ενός κανόνα είναι το:<br>
<pre>block = lbrace statement* rbrace; κάτι το οποίο δηλώνει ένα μπλοκ εντολών</pre></p>

<p>Επιπλέον μπορούμε να έχουμε εναλλακτικούς κανόνες παραγωγής, χωριζόμενους από το χαρακτήρα σωλήνωσης |. Σε αυτήν την περίπτωση θα πρέπει να δίνουμε ένα όνομα στην κάθε εναλλακτική παραγωγή μέσα σε αγκύλες {,}. Η γενική μορφή είναι <br>
<pre>
  αριστερό = {όνομα1} δεξί1<br>
  |...<br>
  |{όνομαΝ} δεξίΝ ;<br>
  παράδειγμα: <br>
  literal = {true} true<br>
  | {false} false<br>
  | {integer} number ;<br> </pre>
όπως φαίνεται, δεν υπάρχει σύγκρουση ανάμεσα στα ονόματα των εναλλακτικών και τυχόν ομώνυμα tokens μέσα στον κανόνα.</p>

<p>Ακόμα, κάθε φορά που ένα στοιχείο εμφανίζεται παραπάνω από μια φορά στο δεξί μέλος κανόνα, θα πρέπει να ονομάζονται τα διάφορα στοιχεία υπό τη μορφή [όνομα]:στοιχείο, πχ<br>
<pre>
  if_then_else_statement =<br>
  if lparen expression rparen [if_st]:statement else [else_st]:statement</pre></p>

<p>Ακόμα η λέξη class πρέπει να ονομάζεται πάντα, γιατί αλλιώς δεν τη δέχεται ως όνομα στοιχείου το SableCC, πχ class_token = ‘class’;</p>

<p> Μετά που θα μεταγλωττίσουμε με το SableCC τη γραμματική με <br>
<font color=red>sablecc minipython.grammar</font><br>
και εφόσον η γραμματική είναι σωστή, θα παραχθούν και θα τοποθετηθούν μέσα στο τυχόν δηλωθέν πακέτο οι τάξεις που κάνουν τη λεκτική και τη συντακτική ανάλυση, εφόσον έχουμε γράψει κανόνες και για τη λεκτική και για τη συντακτική ανάλυση.</p>

</font>
</body>
</html>
